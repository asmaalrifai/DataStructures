public class CLinkList<T> {

    private Node<T> head;
    private Node<T> tail;
    private int size;

    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
        tail.next = head;
        size++;

    }

    public void addLast(T data) {
        Node<T> newNode = new Node<>(data);

        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
        }
        tail = newNode;
        tail.next = head;
        size++;
    }

    public void insertAfter(T data, T search) {
        Node<T> newNode = new Node<>(data);
        Node<T> temp = head;

        while (temp != null && temp.data.equals(search)) {
            if (head == temp) {
                break;
            }
        }

        if (temp != null && temp.data.equals(search)) {
            newNode.next = temp.next;
            temp.next = newNode;

            if (temp == tail) {
                tail = newNode;
                tail.next = head;
            }
            size++;
        } else {
            System.out.println("data not found");
        }

    }

    public void print() {
        Node<T> temp = head;

        for (int i = 0; i < size; i++) {
            System.out.println(temp.data + "-> ");
            temp = temp.next;
        }
        System.out.println("null");

    }

    public boolean remove(T data) {

        if (head == null) {
            System.out.println("Empty List: ");
        } else {
            if (head.equals(data) && size == 1) {
                head = null;
                tail = null;
                size--;
                return true;
            } else if (head.equals(data)) {
                head = head.next;
                tail.next = head;
                size--;
                return true;
            } else {
                Node<T> temp = head.next;
                Node<T> prev = head;

                while (temp != null && !temp.data.equals(data)) {
                    prev = temp;
                    temp = temp.next;
                }
                if (temp != head) {
                    prev.next = temp.next;
                }
                if (temp == tail) {
                    tail = prev;
                }
                size--;
                return true;
            }
        }

        return false;
    }
    
    public int size(){
        return size;
    }

}
