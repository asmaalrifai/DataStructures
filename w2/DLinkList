public class DLinkList<T> {

    Node<T> head;
    int size = 0;

    public void addFirst(T data) {
        Node<T> newNode = new Node<>(data);

        if (head == null) {
            head = newNode;
        } else {
            head.prev = newNode;
            newNode.next = head;////
        }
        size++;
    }

    public void addLast(T data) {
        Node<T> newNode = new Node<>(data);
        Node<T> temp = head;

        if (head == null) {
            head = newNode;

        } else {
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
            newNode.prev = temp;
        }
        size++;
    }

    public void insertAfter(T data, T search) {
        Node<T> temp = head;
        Node<T> newNode = new Node<>(data);

        while (temp != null && !temp.data.equals(search)) {
            temp = temp.next;
        }
        if (temp != null) {
            newNode.next = temp.next;
            newNode.prev = temp;

            temp.next.prev = newNode;
            temp.next = newNode;

            size++;
        } else if (temp.next == null && temp.data.equals(search)) {
            addLast(data);

        } else {
            System.out.println("Data not found: ");
        }
    }

    public boolean remove(T data) {

        if (head == null) {
            System.out.println("Empty List");
        } else {
            if (head.data.equals(data)) {
                head = head.next;
                head.prev = null;
                size--;
                return true;
            } else {
                Node<T> temp = head.next;

                while (temp != null && !temp.data.equals(data)) {
                    temp = temp.next;
                }

                if (temp != null) {
                    temp.prev.next = temp.next;

                    if (temp.next != null) {
                        temp.next.prev = temp.prev;
                    }
                }
                size--;
                return true;
            }
        }

        return false;
    }

    public void print() {
        Node<T> temp = head;

        if (head == null) {
            System.out.println("Empty");
        }

        for (int i = 0; i < size; i++) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("Null");

    }
}
