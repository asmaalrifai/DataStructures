public class LinkedList {

    // nested class
    class Node {

        int value;
        Node next;

        Node(int value) {
            this.value = value;
        }
    }

    private Node head;
    private Node tail;
    private int length;

    public LinkedList(int value) {
        Node newNode = new Node(value);
        head = newNode;
        tail = newNode;
        length = 1;
    }

    public void printList() {
        if (length == 0 || head == null || tail == null) {
            System.out.println("Empty Linked List");
        } else {
            Node temp = head;
            while (temp != null) {
                System.out.print(temp.value + " -> ");
                if (temp.next == null) {
                    System.out.println();
                }
                temp = temp.next;
            }
        }
    }

    public void getHead() {
        System.out.println("Head: " + head.value);
    }

    public void getTail() {
        System.out.println("Tail: " + tail.value);
    }

    public void getLength() {
        System.out.println("Length: " + length);
    }

    public void appeand(int value) {
        Node newNode = new Node(value);
        if (head == null || tail == null || length == 0) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
        length++;
    }

    public Node removeLast() {
        if (head == null || tail == null || length == 0) {
            System.out.println("list is already empty");
            return null;
        } else if (length == 1 || head == tail) {
            head = null;
            tail = null;
            length = 0;
            System.out.println("List become empty");
            return null;
        } else {
            Node temp = head;
            Node pre = head;
            while (temp.next != null) {
                pre = temp;
                temp = temp.next;
            }
            tail = pre;
            tail.next = null;

            length--;

            return temp;
        }
    }
}
